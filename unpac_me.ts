/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface components {
  schemas: {
    /** Job status */
    status:
      | 'validating'
      | 'queued'
      | 'analyzing'
      | 'unpack_pending'
      | 'unpacking'
      | 'unpack-requeue'
      | 'unpacked'
      | 'post_analysis'
      | 'complete'
      | 'fail';
    /** PE section */
    section: {
      /** Section characteristics */
      Characteristics: number;
      /** Section entropy */
      Entropy: number;
      /** MD5 of section data */
      MD5: string;
      /** Section name */
      Name: string;
      /** Hex encoded section name */
      Name_Hex: string;
      /** Number of line numbers */
      NumberOfLinenumbers: number;
      /** Number of relocations */
      NumberOfRelocations: number;
      /** Pointer to line numbers */
      PointerToLinenumbers: number;
      /** Pointer to raw data */
      PointerToRawData: number;
      /** Pointer to relocations */
      PointerToRelocations: number;
      /** SHA1 of section data */
      SHA1: string;
      /** SHA256 of section data */
      SHA256: string;
      /** Size of raw data */
      SizeOfRawData: number;
      /** Virtual address of section */
      VirtualAddress: number;
      /** Virtual size of section */
      VirtualSize: number;
    };
    /** DetectIt Entity */
    detectit_entity: {
      /** Detection name */
      name: string;
      /** Detection options */
      options: string;
      /** Detection description */
      string: string;
      /** Detection type */
      type: string;
      /** DetectIt version */
      version: string;
    };
    /** Malware ID match */
    malware_id: {
      /** Match confidence */
      confidence: string;
      /** Match name */
      name: string;
      /** Match reference */
      reference: string;
      /** Match source */
      source: string;
    };
    /** Malware ID match high level info */
    malware_id_short: {
      /** Match name */
      match: string;
      /** Match source */
      type: string;
    };
    /** PE rich header */
    rich_header: {
      /** Build */
      Build: string;
      /** Build ID */
      BuildId: number;
      /** Count */
      Count: number;
      /** Product ID */
      ProdId: number;
      /** Product */
      Product: string;
    };
    /** PE file resource */
    resource: {
      /** Codepage */
      codepage: number;
      /** Language */
      lang: string;
      /** Resource type */
      magic_type: string;
      /** Resource offset */
      offset: number;
      /** Resource size */
      size: number;
      /** Sub-Language */
      sublang: string;
    };
    resource_entry: {
      entries?: components['schemas']['resource'][];
      /** Resource name */
      name?: string;
    };
    resource_entity: {
      entries?: components['schemas']['resource_entry'][];
      /** Resource type */
      type?: string;
    };
    /** DeepMatch entity */
    deepmatch_entity: {
      /** Percent average match */
      average: number;
      /** Match name */
      label: string;
    };
    /** API export */
    export: {
      /** Export address */
      address: number;
      /** Export name */
      name: string;
      /** Export ordinal */
      ordinal: number;
    };
    /** API function */
    function: {
      /** API imported by ordinal */
      import_by_ordinal: boolean;
      /** API name */
      name: string;
    };
    /** PE file import entity */
    import_entity: {
      /** Library name */
      library: string;
      functions: components['schemas']['function'][];
    };
    /** Unpack result */
    result: {
      hashes: {
        /** MD5 hash of sample */
        md5?: string;
        /** SHA1 hash of sample */
        sha1?: string;
        /** SHA256 hash of sample */
        sha256?: string;
      };
      analysis: {
        exports?: {
          /** Export count */
          count?: number;
          functions?: components['schemas']['export'][];
        };
        imports?: {
          /** Import count */
          count?: number;
          entities?: components['schemas']['import_entity'][];
        };
        metadata?: {
          Characteristics?: string[];
          /** PE file checksum */
          Checksum?: number;
          /** PE file compile time */
          'Compile Time'?: string;
          /** PE file contains compressed data */
          'Contains Compressed Data'?: boolean;
          /** Entry point first 16 bytes */
          'EP Bytes'?: string;
          /** PE file entry point */
          'Entry Point'?: number;
          /** PE file image base */
          'Image Base'?: number;
          /** PE file linker version */
          'Linker Version'?: string;
          /** PE file program database file path */
          'PDB Path'?: string;
          /** Number of sections */
          Sections?: number;
          /** PE file signature */
          Signature?: number;
          /** PE file size */
          Size?: number;
          /** PE file subsystem */
          Subsystem?: string;
          /** PE file type */
          Type?: string;
          VersionInfo?: {
            StringInfo?: {
              /** Company name */
              CompanyName?: string;
              /** File description */
              FileDescription?: string;
              /** File version */
              FileVersion?: string;
              /** Legal copyright */
              LegalCopyright?: string;
              /** Original file name */
              OriginalFilename?: string;
              /** Product name */
              ProductName?: string;
              /** Product version */
              ProductVersion?: string;
            };
            VarInfo?: {
              /** Language ID */
              LangID?: string;
              /** Translation */
              Translation?: string;
              /** Character set ID */
              charsetID?: string;
            };
          };
        };
        resources?: components['schemas']['resource_entity'][];
        rich_headers?: {
          /** Rich header checksum */
          Checksum?: string;
          Entries?: components['schemas']['rich_header'][];
        };
        sections?: components['schemas']['section'][];
      };
      deepmatch?: components['schemas']['deepmatch_entity'][];
      detectit?: components['schemas']['detectit_entity'][];
      malware_id?: components['schemas']['malware_id'][];
      malware_id_restricted?: components['schemas']['malware_id'][];
      strings?: {
        ascii?: string[];
        stack?: string[];
        wide?: string[];
      };
      urls?: string[];
    };
    feed_entity: {
      /** AutoIt detected */
      autoit?: boolean;
      /** Number of unpacked children */
      children?: number;
      /** Submission timestamp */
      created?: number;
      /** DeepMatch matches */
      deepmatch?: components['schemas']['deepmatch_entity'][];
      /** Downloader detected */
      downloader?: boolean;
      /** Unpacking submission ID */
      id?: string;
      malwareid?: components['schemas']['malware_id_short'][];
      malwareid_restricted?: components['schemas']['malware_id_short'][];
      /** Parent submission SHA256 */
      sha256?: string;
      /** Unpacking status */
      status?: string;
    };
    history_entity: {
      /** AutoIt detected */
      autoit?: boolean;
      /** Number of unpacked children */
      children?: number;
      /** Submission timestamp */
      created?: number;
      /** DeepMatch matches */
      deepmatch?: components['schemas']['deepmatch_entity'][];
      /** Downloader detected */
      downloader?: boolean;
      /** Unpacking submission ID */
      id?: string;
      malwareid?: components['schemas']['malware_id_short'][];
      malwareid_restricted?: components['schemas']['malware_id_short'][];
      /** Parent submission SHA256 */
      sha256?: string;
      /** Unpacking status */
      status?: string;
      /** Sample is private */
      private?: boolean;
    };
    search_entity: {
      /** Submission timestamp */
      created?: number;
      /** Unpacking submission ID */
      submission_id?: string;
      children?: string[];
      /** Parent submission SHA256 */
      sha256?: string;
      /** Unpacking status */
      status?: string;
      /** Sample metadata */
      metadata?: string;
    };
    private_feed_entity: {
      /** AutoIt detected */
      autoit?: boolean;
      /** Number of unpacked children */
      child_count?: number;
      children?: {
        [key: string]: {
          /** AutoIt detected */
          autoit?: boolean;
          /** Downloader detected */
          downloader?: boolean;
          malwareid?: string[];
        };
      };
      /** Submission timestamp */
      created?: number;
      /** Downloader detected */
      downloader?: boolean;
      /** Unpacking submission ID */
      id?: string;
      malwareid?: components['schemas']['malware_id_short'][];
      /** Parent submission SHA256 */
      submission_sha256?: string;
    };
    /** Private feed yara tags */
    PrivateFeedYaraTags: {
      /** Numer of tags available */
      count?: number;
      /** Yara tag names */
      malwareid?: { [key: string]: number };
    };
    /** Private feed filtered by tag */
    PrivateFeedFiltered: {
      /** Cursor used to scroll to page of feed results */
      cursor?: number;
      /** Number of submissions in feed page */
      submission_count?: { [key: string]: any };
      /** Type of tag used to filter feed */
      tag_type?: string;
      /** Tag label */
      tag_value?: string;
      submissions?: components['schemas']['private_feed_entity'][];
    };
    /** Private feed */
    PrivateFeed: {
      /** Cursor used to scroll to page of feed results */
      cursor?: number;
      /** Number of submissions in feed page */
      submission_count?: { [key: string]: any };
      submissions?: components['schemas']['private_feed_entity'][];
    };
    /** Public feed */
    History: {
      /** Cursor used to scroll to page of results */
      cursor?: number;
      results?: components['schemas']['history_entity'][];
    };
    /** Public feed */
    PublicFeed: {
      results?: components['schemas']['feed_entity'][];
    };
    /** Search results */
    SearchResults: {
      results?: components['schemas']['search_entity'][];
    };
    /** Unpack submission status */
    UnpackStatus: {
      /** Unpack submission ID */
      id: string;
      status: components['schemas']['status'];
    };
    /** Unpack submission results */
    UnpackResults: {
      /** Unpack submission ID */
      id: string;
      status: components['schemas']['status'];
      /** SHA256 hash of the submitted file */
      sha256: string;
      /** Timestamp of original submission (in UTC) */
      time: number;
      /** Sample is private */
      private?: boolean;
      /** Sample was submitted by current user */
      user_submitted?: boolean;
      /** Array of results from submission, including the parent */
      results: components['schemas']['result'][];
    };
    /** User settings */
    UserAccess: {
      /** API key */
      api_key: string;
      /** Sample feed direct download URL (only available to Feed subscribers) */
      feed_download_url?: string;
      /** Sample feed direct download password (only available to Feed subscribers) */
      feed_password?: string;
      /** Sample feed direct download username (only available to Feed subscribers) */
      feed_username?: string;
      /** Monthly upload limit */
      month_limit: number;
      /** Number of submissions for the current month */
      month_submissions: number;
      /** Number of private submissions for the current month */
      month_submissions_private?: number;
      /** Service access roles */
      roles: string[];
      /** Lifetime total number of submissions */
      total_submissions: number;
    };
  };
}

export interface paths {
  '/private/feed/unpacked': {
    /** Returns full feed of unpacked samples */
    get: operations['getPrivateFeed'];
  };
  '/private/feed/unpacked/yara': {
    /** Returns list of all yara tags available for the feed */
    get: operations['getPrivateFeedYaraTags'];
  };
  '/private/feed/unpacked/yara/{yara_rule}': {
    /** Returns full feed of unpacked samples filtered by the yara rule */
    get: operations['getPrivateFeedYaraFiltered'];
  };
  '/private/user/access': {
    /** Returns user settings */
    get: operations['getPrivateUserAccess'];
  };
  '/private/user/malpedia': {
    /** Returns user Malpedia info */
    get: operations['getPrivateUserMalpedia'];
    /** Authenticate user to Malpedia using API token */
    post: operations['postPrivateUserMalpedia'];
    /** Removes Malpedia authentication and deletes Malpedia token */
    delete: operations['deletePrivateUserMalpedia'];
  };
}

export interface operations {
  /** Returns full feed of unpacked samples */
  getPrivateFeed: {
    parameters: {
      query: {
        /** Scroll feed to cursor */
        cursor?: number;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/json': components['schemas']['PrivateFeed'];
        };
      };
    };
  };
  /** Returns list of all yara tags available for the feed */
  getPrivateFeedYaraTags: {
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/json': components['schemas']['PrivateFeedYaraTags'];
        };
      };
    };
  };
  /** Returns full feed of unpacked samples filtered by the yara rule */
  getPrivateFeedYaraFiltered: {
    parameters: {
      path: {
        /** Yara rule name used to filter feed */
        yara_rule: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/json': components['schemas']['PrivateFeedFiltered'];
        };
      };
    };
  };
  /** Returns user settings */
  getPrivateUserAccess: {
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/json': components['schemas']['UserAccess'];
        };
      };
    };
  };
  /** Returns user Malpedia info */
  getPrivateUserMalpedia: {
    responses: {
      /** successful operation */
      200: {
        content: {
          'application/json': {
            /** Is user authorized to use Malpedia API */
            malpedia_authorized?: boolean;
            /** Malpedia API token */
            malpedia_token?: string;
          };
        };
      };
    };
  };
  /** Authenticate user to Malpedia using API token */
  postPrivateUserMalpedia: {
    responses: {
      /** successful operation */
      default: unknown;
    };
    requestBody: {
      content: {
        'application/json': {
          /** Malpedia API token */
          token?: string;
        };
      };
    };
  };
  /** Removes Malpedia authentication and deletes Malpedia token */
  deletePrivateUserMalpedia: {
    responses: {
      /** successful operation */
      default: unknown;
    };
  };
}
